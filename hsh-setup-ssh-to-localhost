#!/bin/sh -efuC
set -o pipefail

# A script to setup ssh from hasher to localhost.
#
# Of course, there can be some security implications when you share network
# with hasher and give it access to localhost via ssh.

readonly HSHDIR="$1"; shift

readonly MY="${0%/*}"
set -x

hsh-install "$HSHDIR" -- openssh-clients

# Generate the key for the access from inside hasher, and register it.

# It makes little difference whether we generate the key in- or outside hasher.
# (If we do it inside, we are sure not to clobber anything in user's homedir.)
hsh-run --rooter "$HSHDIR" \
	-- ssh-keygen -t rsa -f /root/.ssh/id_rsa \
	</dev/null

HSH_SSH_PUBKEY="$(hsh-run --rooter "$HSHDIR" \
			  -- ssh-keygen -y -f /root/.ssh/id_rsa \
			  </dev/null)"
readonly HSH_SSH_PUBKEY
HSH_SSH_KEY_OPTS='restrict,from="127.0.0.0/8,::1"'
if [ has-expiry = "$(rpm -q openssh-server \
                     --qf='%{VERSION:nothing}%|%{VERSION}>7.7?{has-expiry}:{}|\n')" ]
   # OpenSSH 7.7 and above has this option. (But RPM has only the > test.)
   # FIXME: get rid of %{VERSION:nothing} by fixing RPM ed507df77e,
   # which now works only with cached tags on the LHS of >.
then
    IN_A_MONTH="$(date -d '+1 month' +%Y%m%d%H%M)"
    readonly IN_A_MONTH
    printf -v HSH_SSH_KEY_OPTS '%s,expiry-time="%s"' \
	   "$HSH_SSH_KEY_OPTS" \
	   "$IN_A_MONTH"
fi
readonly HSH_SSH_KEY_OPTS
printf '%s %s rooter@ in %s\n' \
       "$HSH_SSH_KEY_OPTS" \
       "$HSH_SSH_PUBKEY" \
       "$HSHDIR" \
       >>~/.ssh/authorized_keys

"$MY"/hsh-write --rooter "$HSHDIR" -- /root/.ssh/config \
	<<EOF

Host localhost
     StrictHostKeyChecking no
     User $USER
EOF

# Test that it works
share_network=1 \
	     hsh-run --rooter "$HSHDIR" \
	     -- ssh localhost echo hello \
	     </dev/null
